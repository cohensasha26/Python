// Data//
S housing market depends on various factors. Here are some macroeconomic factors relevant to the market. The following attributes have been collected,

Date: Year

House_Price_Index: House price change according to the index base period set (you can check the date at which this value is 100).

Stock_Price_Index: Stock price change according to the index base period set (you can check the date at which this value is 100).

Consumer_Price_Index: The Consumer Price Index measures the overall change in consumer prices based on a representative basket of goods and services over time.

Population: Population of USA (unit: thousands).

Unemployment_Rate: Unemployment rate of USA (unit: percentage).

Real_GDP: GDP with adjusted inflation (Annual version unit: billions of chain 2012 dollars in, Monthly version unit: Annualised change).

Mortgage_Rate: Interest charged on mortgages (unit: percentage).

Real_Disposable_Income (Real Disposable Personal Income): Money left from salary after all the taxes are paid (unit: billions of chain 2012 dollars).

Your task is to load the data, pre-process it, explore and visualize it

//Exercise 1: Import numpy, pandas and matplotlib libraries into Jupyter//

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

//Exercise 2: Create a dataframe from a csv file and display the size of the dataframe//

url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-CD0198EN-SkillsNetwork/labs/data/Annual_Macroeconomic_Factors.csv'

df = pd.read_csv(url)

# Preview the data
df.head()


//Exercise 3: Create a reduced dataframe by dropping Stock_Price_Index//

data_reduced = data.drop(["Stock_Price_Index"], axis=1) 
data_reduced.head()

//Exercise 4: Create a smaller dataframe by dropping data that has Unemployment_Rate > 9.5%//

data_reduced_subset = data.drop(data[data["Unemployment_Rate"]>9.5].index) 
data_reduced_subset.head()

//Exercise 5: Get the dimensions of the dataframe created in Question 4//

data_reduced_subset.size

//Exercise 6: Create a dataframe by selecting Real_Disposable_Income and House_Price_Index attributes from the original dataset and print out the statistics for these attributes//

disp_income = data[['Real_Disposable_Income', 'House_Price_Index']] 
disp_income.describe()

//Exercise 7: Plot a scatter plot between House_Price_Index and Real_Disposable_Income//

x= data['Real_Disposable_Income']
y=data['House_Price_Index']

plt.scatter(x,y)
plt.xlabel("Real_Disposable_Income")
plt.ylabel("House_Price_Index")
plt.show()

//Exercise 8: Create a bar chart with date (as year) on X-axis and Real_GDP on the Y-axis//

x= pd.DatetimeIndex(data['Date']).year
y= data['Real_GDP']

plt.bar(x,y, color='blue')
plt.xlabel("Date")
plt.ylabel("Real_GDP")
plt.show()

//Exercise 9: Create a combo chart with date on X-axis and Consumer_Price_Index on Y1-axis (bar) and Mortgage_Rate (line) on Y2-axis//

fig, ax1 = plt.subplots(figsize=(9, 6))
x = pd.DatetimeIndex(data['Date']).year
y1 = data['Consumer_Price_Index']
y2 = data['Mortgage_Rate']

ax2 = ax1.twinx()
ax1.bar(x,y1, color="blue")
ax2.plot(x,y2, color="green", marker= ".", markersize=10)
ax1.set_xlabel("Date")
ax1.set_ylabel("Comsumer_Price_Index")
ax2.set_ylabel("Mortage_Rate(%)")
plt.show()

//Exercise 10: Create sub-plots with Date on X-axis and Stock_Price_Index on subplot 1 and Consumer_Price_Index on subplot 2//

x0 = pd.DatetimeIndex(data['Date']).year
x1= data['Stock_Price_Index']
x2 = data['Consumer_Price_Index']

plt.subplots(2, 1, sharex=True, figsize=(9,6,)) 

plt.subplot(2,1,1)
plt.plot(x0,x1)
plt.fill_between(x0,x1, color="blue")
plt.title("Stock_Price_Index")

plt.subplot(2,1,2)
plt.plot(x0, x2, marker="^")
plt.title("Consumer_Price_Index")

plt.tight_layout()
plt.show()

////Â© Copyright IBM Corporation. All rights reserved.////
