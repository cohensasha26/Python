----------------------------------------------------#OPTION 1#----------------------------------


#QUERY = """
    #SELECT TimeSearching, Frustration, Age 
    #FROM Main
    #WHERE Age IS NOT NULL AND TimeSearching IS NOT NULL AND Frustration IS NOT NULL;
#"""

#df_bubble2 = pd.read_sql_query(QUERY, conn)

#create plot
#plt.figure(figsize=(18, 8))
#sns.scatterplot(
    #data=df_bubble2,
    #x='TimeSearching',
    #y='Frustration',
    #size='Age',           # Bubble size
    #sizes=(10, 200),             # Controls the min/max size
    #hue='FrustrationNumeric',    # Color based on frustration level
    #palette='coolwarm',          # Adjust the color palette
    #alpha=0.7,
    #color = 'skyblue'
    #legend=False                 # Optional: Hide size legend
#)

#plt.title('Bubble Plot: Time Searching vs. Frustration (Bubble = Age)')
#plt.xlabel('Time Searching (minutes)')
#plt.ylabel('Frustration Level')
#plt.grid(True)
#plt.show()



-------------------------------------------#OPTION TWO#----------------------------------------------


#Use SQL to get the correct data
QUERY = """
    SELECT
        Age,
        CASE Age
            WHEN 'Under 18 years old' THEN 16
            WHEN '18-24 years old' THEN 21
            WHEN '25-34 years old' THEN 29
            WHEN '35-44 years old' THEN 39
            WHEN '45-54 years old' THEN 49
            WHEN '55-64 years old' THEN 59
            WHEN '65 years or older' THEN 70
        END AS AgeNumeric,
        TimeSearching, Frustration
    FROM Main
    WHERE Age IS NOT NULL AND TimeSearching IS NOT NULL AND Frustration IS NOT NULL;
"""

df_bubble = pd.read_sql_query(QUERY, conn)
df_bubble[['Age', 'AgeNumeric', 'TimeSearching', 'Frustration']].dtypes

#check the unique values to create mapping
df_bubble['TimeSearching'].unique()

#Create mapping
time_mapping = {
    'Less than 15 minutes a day': 10,
    '15-30 minutes a day': 22.5,
    '30-60 minutes a day': 45,
    '60-120 minutes a day': 90,
    'Over 120 minutes a day': 150
}

#Apply mapping
df_bubble['TimeSearchingNumeric'] = df_bubble['TimeSearching'].map(time_mapping)

#Drop any missing values just in case
df_bubble = df_bubble.dropna(subset=['TimeSearchingNumeric', 'Frustration', 'AgeNumeric'])

df_bubble['Frustration'].unique()

#count number of issues per frustration
df_bubble['FrustrationCount'] = df_bubble['Frustration'].apply(lambda x: len(str(x).split(';')))

#Create map
df_bubble['FrustrationNumeric'] = df_bubble['FrustrationCount'].apply(lambda x: min(5, x))

#Label encoding
df_bubble['FrustrationNumeric'] = pd.cut(df_bubble['FrustrationCount'], bins=[0, 2, 4, 6], labels=[1, 3, 5])

df_bubble['FrustrationNumeric']

#Convert FrustrationNumeric to numeric type (if not already done)
df_bubble['FrustrationNumeric'] = pd.to_numeric(df_bubble['FrustrationNumeric'], errors='coerce')

#Create some jitter for TimeSearching and Frustration to prevent overlapping
df_bubble['TimeSearchingJittered'] = df_bubble['TimeSearchingNumeric'] + np.random.uniform(-0.3, 0.3, size=len(df_bubble))
df_bubble['FrustrationJittered'] = df_bubble['FrustrationNumeric'] + np.random.uniform(-0.3, 0.3, size=len(df_bubble))

#Create the bubble plot
plt.figure(figsize=(10, 6))
sns.scatterplot(
    data=df_bubble,
    x='TimeSearchingJittered',
    y='FrustrationJittered',
    size='AgeNumeric',           # Bubble size
    sizes=(50, 300),             # Controls the min/max size
    hue='FrustrationNumeric',    # Color based on frustration level
    palette='coolwarm',          # Adjust the color palette
    alpha=0.7,
    edgecolor='gray',
    legend=False                 # Optional: Hide size legend
)

#Create a color palette for frustration levels (we map them to a color scale)
frustration_palette = {1: 'lightgreen', 2: 'yellow', 3: 'orange', 4: 'red', 5: 'darkred'}


#Add a custom legend
#Create a manual legend for frustration levels
handles = [
    plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=color, markersize=10)
    for color in frustration_palette.values()
]
labels = ['Low (1)', 'Medium (2)', 'High (3)', 'Very High (4)', 'Extreme (5)']

#Position the legend outside the plot
plt.legend(handles=handles, labels=labels, title="Frustration Level", loc="upper left", fontsize=10,
           bbox_to_anchor=(1.05, 1))  # Move the legend to the right of the plot

#Add titles and labels
plt.title('Bubble Plot: Time Searching vs. Frustration (Bubble = Age)')
plt.xlabel('Time Searching (minutes)')
plt.ylabel('Frustration Level')
plt.grid(True)
plt.show()
